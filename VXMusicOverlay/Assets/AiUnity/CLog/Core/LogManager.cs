#region License

/*
 * Copyright ï¿½ 2002-2009 the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#endregion

#if AIUNITY_CODE

using System;
using AiUnity.CLog.Core.Common;
using System.Reflection;
using AiUnity.CLog.Core.Configuration;
using AiUnity.Common.InternalLog;
using AiUnity.Common.Patterns;
using AiUnity.Common.Log;
using AiUnity.CLog.Core.Loggers;

namespace AiUnity.CLog.Core
{
    /// <summary>
    /// Use the LogManager's <see cref="GetLogger(string)"/> or <see cref="GetLogger(System.Type, System.Object)"/> 
    /// methods to obtain <see cref="CLogger"/> instances for logging.
    /// </summary>
    /// <tags>CLogAPI</tags>
    public sealed class CLogManager : Singleton<CLogManager>, ILogManager
    {
        // Internal logger singleton
        private static IInternalLogger Logger { get { return CLogInternalLogger.Instance; } }

        /// <summary>
        /// The key of the default configuration section to read settings from.
        /// </summary>
        /// <remarks>
        /// You can always change the source of your configuration settings by setting another <see cref="IConfigurationReader"/> instance
        /// on <see cref="ConfigurationReader"/>.
        /// </remarks>
        public string CLOG_SECTION { get { return "clog"; } }

        /// <summary>
        /// Determines if an assert message should produce an exception.
        /// </summary>
        /// <autogeneratedoc />
        public bool AssertException { get; set; }

        private ILoggerFactoryAdapter adapter = null;
        private readonly object loadLock = new object();

        /// <summary>
        /// Indicate if Adapter has been set.
        /// </summary>
        /// <remarks>
        /// You can always change the source of your configuration settings by setting another <see cref="IConfigurationReader"/> instance
        /// on <see cref="ConfigurationReader"/>.
        /// </remarks>
        public bool IsAdapterSet { get { return this.adapter != null; } }

        /// <summary>
        /// Performs 1-time initialization of LogManager by calling <see cref="Reset()"/>
        /// Prevents a default instance of the LogManager class from being created.
        /// </summary>
        //private CLogManager()
        public CLogManager()
        {
            Reset();
        }

        /// <summary>
        /// Reset the <see cref="Common.Logging" /> infrastructure to its default settings. This means, that configuration settings
        /// will be re-read from section <c>&lt;common/logging&gt;</c> of your <c>app.config</c>.
        /// </summary>
        /// <remarks>
        /// This is mainly used for unit testing, you wouldn't normally use this in your applications.<br/>
        /// <b>Note:</b><see cref="CLogger"/> instances already handed out from this LogManager are not(!) affected. 
        /// Resetting LogManager only affects new instances being handed out.
        /// </remarks>
        public void Reset()
        {
            Reset(new DefaultConfigurationReader());
        }

        /// <summary>
        /// Reset the <see cref="Common.Logging" /> infrastructure to its default settings. This means, that configuration settings
        /// will be re-read from section <c>&lt;common/logging&gt;</c> of your <c>app.config</c>.
        /// </summary>
        /// <remarks>
        /// This is mainly used for unit testing, you wouldn't normally use this in your applications.<br/>
        /// <b>Note:</b><see cref="CLogger"/> instances already handed out from this LogManager are not(!) affected. 
        /// Resetting LogManager only affects new instances being handed out.
        /// </remarks>
        /// <param name="reader">
        /// the <see cref="IConfigurationReader"/> instance to obtain settings for 
        /// re-initializing the LogManager.Instance..
        /// </param>
        public void Reset(IConfigurationReader reader)
        {
            lock (this.loadLock) {
                if (reader == null) {
                    throw new ArgumentNullException("reader");
                }
                ConfigurationReader = reader;
                this.adapter = null;
            }
        }

        /// <summary>
        /// Gets the configuration reader used to initialize the LogManager.Instance..
        /// </summary>
        /// <remarks>Primarily used for testing purposes but maybe useful to obtain configuration
        /// information from some place other than the .NET application configuration file.</remarks>
        public IConfigurationReader ConfigurationReader { get; private set; }



        /// <summary>
        /// Gets or sets the adapter.
        /// </summary>
        public ILoggerFactoryAdapter Adapter
        {
            get
            {
                if (this.adapter == null) {
                    lock (this.loadLock) {
                        if (this.adapter == null) {
                            this.adapter = BuildLoggerFactoryAdapter();
                        }
                    }
                }
                return this.adapter;
            }
            set
            {
                lock (this.loadLock) {
                    this.adapter = value;
                }
            }
        }

        /// <summary>
        /// Gets the logger by calling <see cref="ILoggerFactoryAdapter.GetLogger(string, Object)"/>
        /// on the currently configured <see cref="Adapter"/> using the specified type.
        /// </summary>
        /// <param name="context">Usually the reference <see cref="Object" /> of the current class.</param>
        /// <returns>the logger instance obtained from the current <see cref="Adapter"/></returns>
        public CLogger GetLogger(System.Object context, IFormatProvider formatProvider = null)
        {
            UnityEngine.Object UnityContext = context as UnityEngine.Object;
            return GetLogger(context.GetType().FullName, UnityContext, formatProvider);
        }

        /// <summary>
        /// Gets the logger by calling <see cref="ILoggerFactoryAdapter.GetLogger(string, Object)"/>
        /// on the currently configured <see cref="Adapter"/> using the specified key.
        /// </summary>
        /// <param name="name">The key.</param>
        /// <returns>the logger instance obtained from the current <see cref="Adapter"/></returns>
        ILogger ILogManager.GetLogger(string name, UnityEngine.Object context, IFormatProvider formatProvider)
        {
            return Adapter.GetLogger(name, context, formatProvider);
        }

        /// <summary>
        /// Gets the logger by calling <see cref="ILoggerFactoryAdapter.GetLogger(string, Object)"/>
        /// on the currently configured <see cref="Adapter"/> using the specified key.
        /// </summary>
        /// <param name="name">The key.</param>
        /// <returns>the logger instance obtained from the current <see cref="Adapter"/></returns>
        public CLogger GetLogger(string name, UnityEngine.Object context, IFormatProvider formatProvider = null)
        {
            return Adapter.GetLogger(name, context, formatProvider);
        }

        //  Unity3d - not supported on UWP
        /*public string AssemblyDirectory()
        {
                string codeBase = Assembly.GetExecutingAssembly().CodeBase;
                UriBuilder uri = new UriBuilder(codeBase);
                string path = Uri.UnescapeDataString(uri.Path);
                return System.IO.Path.GetDirectoryName(path);
        }*/

        /// <summary>
        /// Builds the logger factory adapter.
        /// </summary>
        /// <returns>a factory adapter instance. Is never <c>null</c>.</returns>
        private ILoggerFactoryAdapter BuildLoggerFactoryAdapter()
        {
            object sectionResult = ConfigurationReader.GetSection(CLOG_SECTION);

            if (sectionResult == null) {
                Logger.Error("Failed to parse XML section {0}.  Defaulting to Null logger.", CLOG_SECTION);
                return new NullFactoryAdapter();
            }

            // Check is ILoggerFactoryAdapter directly returned from configuration reader
            ILoggerFactoryAdapter loggerFactoryAdapter = sectionResult as ILoggerFactoryAdapter;
            if (loggerFactoryAdapter != null) {
                Logger.Trace("Configuration reader {0} specified ILoggerFactoryAdapter {1}",
                    ConfigurationReader.GetType().FullName, loggerFactoryAdapter.GetType().FullName);
                return loggerFactoryAdapter;
            }

            // Check if LogSetting returned from configuration reader
            LogSetting logSetting = sectionResult as LogSetting;
            if (logSetting == null) {
                Logger.Error("XML returned unknown adapter type.  Defaulting to Null logger.", CLOG_SECTION);
                return new NullFactoryAdapter();
            }
            return BuildLoggerFactoryAdapterFromLogSettings(logSetting);
        }

        /// <summary>
        /// Builds a <see cref="ILoggerFactoryAdapter"/> instance from the given <see cref="LogSetting"/>
        /// using <see cref="Activator"/>.
        /// </summary>
        /// <param name="setting"></param>
        /// <returns>the <see cref="ILoggerFactoryAdapter"/> instance. Is never <c>null</c></returns>
        private ILoggerFactoryAdapter BuildLoggerFactoryAdapterFromLogSettings(LogSetting setting)
        {
            Logger.Assert(setting != null, "LogSetting cannot be null.");
            ILoggerFactoryAdapter adapter = null;

            try {
                    adapter = (ILoggerFactoryAdapter)Activator.CreateInstance(setting.FactoryAdapterType, new object[] { setting.Properties });
            }
            catch (System.Exception) {
                Logger.Error("Log adapter creation threw exception");
                throw;
            }

            Logger.Assert(adapter != null, "Log adapter cannot be null");
            return adapter;
        }
    }
}
#endif
